:- set_prism_flag(em_progress, 1). 
:- set_prism_flag(max_iterate, 200). 

main(Gs,Foutp,Fouta) :- set_prism_flag(restart,1), set_prism_flag(learn_mode,vb), set_prism_flag(viterbi_mode,vb), set_prism_flag(default_sw_a,uniform), set_prism_flag(log_scale,on), learn(Gs), save_sw(Foutp), save_sw_a(Fouta).

show_num(X) :- set_prism_flag(rerank,20), n_viterbig(20,srs('Number_1'-[X])).

show_next(X,Y) :- set_prism_flag(rerank,20), n_viterbig(20,srs('Next_2'-[X,Y])).



srs(P-IN) :- ??* reduce(P-IN,V), msw(P,V).

values('A2_2',[1]).
values('A3_2',[1]).
values('A4_2',[1]).
values('A5_2',[1,2,3]).
values('A6_2',[1,2,3]).
values('Next_2',[1]).
values('NextSentence_1',[1]).
values('Number_1',[1]).

:- set_sw('A2_2',[1.0]).
:- set_sw('A3_2',[1.0]).
:- set_sw('A4_2',[1.0]).
:- set_sw('A5_2',[0.3333333333333333,0.3333333333333333,0.3333333333333333]).
:- set_sw('A6_2',[0.3333333333333333,0.3333333333333333,0.3333333333333333]).
:- set_sw('Next_2',[1.0]).
:- set_sw('NextSentence_1',[1.0]).
:- set_sw('Number_1',[1.0]).

reduce('A2_2'-[A2,B2],1) :- 
    (ground(A2) -> append(X, Y, A2)), 
    (ground(B2) -> append(U, V, B2)), 
    srs('A3_2'-[X,Y]), srs('A4_2'-[U,V]),
    (var(A2) -> append(X, Y, A2)), 
    (var(B2) -> append(U, V, B2)).
reduce('A3_2'-[A2,B2],1) :- 
    (ground(A2) -> append(X, Y, A2) ; true), 
    (ground(B2) -> append(U, V, B2) ; true), 
    srs('A5_2'-[X,U]), srs('A6_2'-[Y,V]), 
    (var(A2) -> append(X, Y, A2) ; true), 
    (var(B2) -> append(U, V, B2) ; true).
reduce('A4_2'-[[],[]],1).
reduce('A5_2'-[[twenty],[twenty]],1).
reduce('A5_2'-[[thirty],[thirty]],2).
reduce('A5_2'-[[forty],[forty]],3).
reduce('A6_2'-[[one],[two]],1).
reduce('A6_2'-[[two],[three]],2).
reduce('A6_2'-[[three],[four]],3).
reduce('Next_2'-[X,Y],1) :- srs('A3_2'-[X,Y]).
reduce('NextSentence_1'-[X],1) :- srs('A2_2'-[X,[]]).
reduce('Number_1'-[X],1) :- srs('A1_2'-[X,X]).



%% appendAR
%% appendAR(X, Y, Z), var(Z), {ins(Z)} => append(X, Y, Z).
%% freezeM(X,Goal),var(X),{ins(X)} => true.
%% freezeM(X,Goal) => (call(Goal); freeze(X, Goal).

appendAR(X, Y, Z) :- append(X, Y, Z).

%% go(A2, B2, X, Y, U, V) :- (var(X); var(Y)), ground(A2),  !, append(X, Y, A2), go(A2, B2, X, Y, U, V).
%% go(A2, B2, X, Y, U, V) :- (var(U); var(V)), ground(B2),  !, append(U, V, B2), go(A2, B2, X, Y, U, V).
%% go(A2, B2, X, Y, U, V) :- ground(X), ground(Y), var(A2), !, append(X, Y, A2), go(A2, B2, X, Y, U, V).
%% go(A2, B2, X, Y, U, V) :- ground(U), ground(V), var(B2), !, append(X, Y, A2), go(A2, B2, X, Y, U, V).
%% go(A2, B2, X, Y, U, V) :- (var(X); var(Y)), var(A2),     !, srs(X, Y), go(A2, B2, X, Y, U, V).
%% go(A2, B2, X, Y, U, V) :- (var(U); var(V)), var(B2),     !, srs(U, V), go(A2, B2, X, Y, U, V).

%% if A2 is not a variable then get X and Y, 
%% if B2 is not a variable then get U and V
%% do srs(X, Y) and srs(U, V)
%% if A2 is a variable then get A2
%% if B2 is a variable then get B2
